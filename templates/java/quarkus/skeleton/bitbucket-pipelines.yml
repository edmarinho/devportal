image: ubuntu:latest

pipelines:
  branches:
    master:
      - step:
          name: Build and Publish
          caches:
            - gradle
          script:
            - apt-get update && apt-get install -y wget
            - wget -q https://github.com/mikefarah/yq/releases/download/3.4.0/yq_linux_amd64 -O /usr/local/bin/yq && chmod +x /usr/local/bin/yq
            - yq --version
            - apt-get install -y openjdk-11-jdk
            - ./gradlew clean build \
                -Dquarkus.kubernetes.ports."http".host-port=4003 \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                {%- if values.docker_window == 'custom' %}
                -Dquarkus.container-image.registry=${{ values.docker_generic }} \
                {%- endif %}
                {%- if values.docker_window == 'default' %}
                -Dquarkus.container-image.registry=registry.hub.docker.com \
                {%- endif %}
                -Dquarkus.container-image.group=${{ values.docker_organization }} \
                -Dquarkus.container-image.username=${{'${{'}} env.DOCKER_USERNAME ${{'}}'}} \
                -Dquarkus.container-image.password=${{'${{'}} env.DOCKER_PASSWORD ${{'}}'}} \
                -Dquarkus.kubernetes.namespace=vkpr \
                -Dquarkus.kubernetes.ingress.expose=true \
                -Dquarkus.kubernetes.ingress.ingress-class-name=kong \
                -Dquarkus.kubernetes.ingress.host=rest.apr.vee.codes \
                -Dquarkus.kubernetes.ingress.tls."rest.apr.vee.codes-tls".enabled=true \
                -Dquarkus.kubernetes.ingress.tls."rest.apr.vee.codes-tls".hosts=rest.apr.vee.codes \
                -Dquarkus.kubernetes.ingress.annotations."backstage.io/kubernetes-id"=spring-sample-app \
                -Dquarkus.kubernetes.ingress.annotations."cert-manager.io/cluster-issuer"=certmanager-issuer \
                -Dquarkus.kubernetes.ingress.annotations."konghq.com/https-redirect-status-code"=308 \
                -Dquarkus.kubernetes.ingress.annotations."konghq.com/preserve-host"=true \
                -Dquarkus.kubernetes.ingress.annotations."konghq.com/protocols"=https \
                -Dquarkus.kubernetes.ingress.annotations."konghq.com/strip-path"=true \
                -Dquarkus.kubernetes.ingress.annotations."kubernetes.io/tls-acme"=true
            {%- if values.exportKongKubernetes %}
            - npx insomnia-inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml
            {%- endif %}


      - step:
          name: Publish K8S Artifact
          script:
            - pipe: atlassian/bitbucket-upload-file:0.3.4
              variables:
                BITBUCKET_USERNAME: $BITBUCKET_USERNAME
                BITBUCKET_PASSWORD: $BITBUCKET_PASSWORD
                FILE_PATH: 'build/kubernetes/kubernetes.yml'
                DESTINATION_REPO: ${{ values.argoRepoUrl }}
                DESTINATION_FOLDER: '/${{values.componentId}}/'
                DESTINATION_BRANCH: 'master'
                USER_EMAIL: 'veecode-bot@vee.codes'
                USER_NAME: 'veecode-bot'
                COMMIT_MESSAGE: 'A custom message for the commit'

      - step:
          name: Generating Kubernetes config for Kong
          script:
            - export INSO_VERSION=3.12.0
            - curl -o /usr/local/bin/inso -L https://github.com/Kong/setup-inso/releases/download/$INSO_VERSION/inso-linux
            - chmod +x /usr/local/bin/inso
            - inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml

      - step:
          name: Publishing spec to mockserver
          script:
            - export NAME=$(echo $BITBUCKET_REPO_SLUG | awk -F / '{print $2 }')
            - touch MOCK.yaml
            - yq 'with(.paths; with_entries(.key |=strenv(NAME) + .))' ./openapi-swagger.yaml >> MOCK.yaml
            - cat MOCK.yaml | python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))' > MOCK.json
            - |
              curl --max-time 30 -v -X PUT "${MOCK_SERVER}/mockserver/openapi$([ ! -z "$API_KEY" ] && echo "?apikey=${API_KEY}")" -d "{"specUrlOrPayload": $(cat $PWD/MOCK.json)}"
            - echo "Adding mockserver address to spec"
            - |
              yq ".servers += [{\"url\": \"${MOCK_SERVER}$([[ ! "${MOCK_SERVER}" == */ ]] && echo "/")${NAME}\"}]" -i ./openapi-swagger.yaml

      - step:
          name: Build devportal template
          script:
            - mkdir -p api/
            - NAME=$(echo $BITBUCKET_REPO_SLUG | awk -F / '{print $2 }')
            - echo $NAME
            - touch "api/$NAME.yaml"
            - sed -i "s|\"|'|g" ./openapi-swagger.yaml
            - yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i "api/$NAME.yaml"
            - yq eval ".kind = \"API\" " -i "api/$NAME.yaml"
            - yq eval ".metadata.name=strenv(NAME)" -i "api/$NAME.yaml"
            - yq eval ".metadata.title=strenv(NAME)" -i "api/$NAME.yaml"
            - yq eval ".metadata.publishedAt=\"$(date '+%Y-%m-%d %T')\"" -i "api/$NAME.yaml"            
            - yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i "api/$NAME.yaml"
            - yq eval ".metadata.tags = (strenv(TAGS) | sub(\" +\", \"\") | split(\",\"))" -i "api/$NAME.yaml"
            - yq eval ".spec.type = \"openapi\"" -i "api/$NAME.yaml"
            - yq eval ".spec.lifecycle = \"production\"" -i "api/$NAME.yaml"
            - yq eval ".spec.owner = \"consumer\"" -i "api/$NAME.yaml"
            - yq eval ".spec.definition = \"$(yq -I4 ./openapi-swagger.yaml)\"" --inplace "api/$NAME.yaml"

      - step:
          name: Publish to spec house
          script:
            - mkdir -p $HOME/.ssh
            - echo "$API_TOKEN_BITBUCKET" > $HOME/.ssh/api_token
            - chmod 600 $HOME/.ssh/api_token
            - git clone git@bitbucket.org:${{ values.specPublish }}.git
            - cd ${{ values.specPublish }}
            - git checkout ${{ values.branchName }}
            - cp -R ../api/* .
            - git add .
            - git config user.email "${BITBUCKET_GIT_USER_EMAIL}"
            - git config user.name "${BITBUCKET_GIT_USER_DISPLAY_NAME}"
            - git commit -m "Pipeline commit"
            - git push origin ${{ values.branchName }}